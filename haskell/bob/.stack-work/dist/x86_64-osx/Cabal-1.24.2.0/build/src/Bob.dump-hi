
==================== FINAL INTERFACE ====================
2017-10-09 18:36:25.173293 UTC

interface bob-1.0.0.3-7xyVNrkmtkfFaDzQ2EHBfW:Bob 8002
  interface hash: ae5abc61fd2d8b41cc691e87e65c7787
  ABI hash: 30eeb2188d70a3daca8ccf5ac1d523fe
  export-list hash: 61950612294cf30957c06551336d824f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Bob.responseFor
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
ead4f7e2f0494587c4fdaa4ab80624fb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Bob.$trModule2 Bob.$trModule1) -}
a5e5a3474153bbe93ebd3bc580cd84d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bob"#) -}
40b64e6d94dbcb67caed7df2a84d0f68
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "bob-1.0.0.3-7xyVNrkmtkfFaDzQ2EHBfW"#) -}
23b24bdb669a336d169554ae259ffb17
  $wlvl :: GHC.Prim.Char# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 let {
                   x :: GHC.Prim.Word# = GHC.Prim.int2Word# (GHC.Prim.ord# ww)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leWord# x 887##) of wild {
                   GHC.Types.False
                   -> case {__pkg_ccall base-4.9.1.0 u_iswspace GHC.Prim.Int#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                             (GHC.Prim.ord# ww)
                             GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }
                   GHC.Types.True
                   -> case x of wild1 {
                        DEFAULT
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord# (GHC.Prim.minusWord# wild1 9##) 4##) of wild2 {
                             GHC.Types.False
                             -> case wild1 of wild3 {
                                  DEFAULT -> GHC.Types.True 160## -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False }
                        32## -> GHC.Types.False } }) -}
92dd4d349ec11b87ef999f37fe231400
  responseFor :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 case GHC.List.filter @ GHC.Types.Char Bob.responseFor5 xs of wild {
                   [] -> Bob.responseFor4
                   : ds1 ds2
                   -> case GHC.List.filter
                             @ GHC.Types.Char
                             GHC.Unicode.isAlpha
                             xs of wild1 {
                        []
                        -> case Bob.responseFor_go2
                                  wild
                                  (GHC.List.lastError @ GHC.Types.Char) of wild2 { GHC.Types.C# x ->
                           case x of wild3 {
                             DEFAULT -> Bob.responseFor3 '?'# -> Bob.responseFor2 } }
                        : ds4 ds5
                        -> case (Bob.responseFor_go1 wild1)
                                  `cast`
                                (Data.Monoid.N:All[0]) of wild2 {
                             GHC.Types.False
                             -> case Bob.responseFor_go
                                       wild
                                       (GHC.List.lastError
                                          @ GHC.Types.Char) of wild3 { GHC.Types.C# x ->
                                case x of wild4 {
                                  DEFAULT -> Bob.responseFor3 '?'# -> Bob.responseFor2 } }
                             GHC.Types.True -> Bob.responseFor1 } } }) -}
9cb709a3bcf079d4caab4212b5fee831
  responseFor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Whoa, chill out!"#) -}
33d12228ac904e33a824b82065fc5ca9
  responseFor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sure."#) -}
8f9760d21b5600c883cc68277cae44fc
  responseFor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Whatever."#) -}
7257b37df706fd7cc7dbeca10a2ee37d
  responseFor4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fine. Be that way!"#) -}
8e0bd8852a7709fcb2a99fe27aff9184
  responseFor5 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 -> Bob.$wlvl ww1 }) -}
ca500546b906eca1fa174edd835f8b0f
  responseFor_go ::
    [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
2eba5ad0ad95dac0b50deb5299806678
  responseFor_go1 :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
425834deb4707841f750e11b63b489be
  responseFor_go2 ::
    [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

